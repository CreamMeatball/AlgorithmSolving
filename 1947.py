N = int(input())

# 완전 순열 (교란 순열)
# 수학적으로 점화식을 알아야 함

# 원소가
# 1 2 3 4 5 6 ...
# 있을 때
# 맨 앞 원소 1, 2를 생각한다면

# 1) 1과 2가 선물을 서로 바꿔 가져갔을 경우
# 이 경우 나머지 원소 3, 4, 5, 6, ... 에 대해 N-2 완전 순열을 구하는 것과 같아짐.

# 2) 1이 2의 선물을 가져가고, 2는 1의 선물을 안 가져가는 경우
# 1이 2의 선물을 가져간 것까지 상황까지 봤을 때
# 낭은 사람은 2, 3, 4, 5, 6, ... : (n-1)명 / 남은 선물은 1, 3, 4, 5, 6, ... : (n-1)개
# 이 상황에서 2는 남은 선물에서 1의 선물만 제외하고 아무거나 가져갈 수 있음.
# = "2는 2의 선물을 가져가지 못한다" 에서 2의 이름이 1로만 바뀐 거랑 같음.
# => N-1 완전 순열을 구하는 것과 같아짐.

# 결론적으로,
# 가장 처음 선물을 무엇을 가져갈지 선택하는 사람 1이
# 임의의 사람 k의 선물을 가져간다고 했을 때,
# 그 대상이 된 사람 k가 선물을 가져가는 경우를 두 케이스로 나누면
# 1) 1의 선물을 가져간다. 2) 1말고 또 다른 사람의 선물을 가져간다
# 이 두 경우로 나눌 수 있고
# 각각에 대한 경우의 수는
# 1) 1의 선물을 가져간다: 1 x N-2 명에 대한 완전 순열 (1: 1의 선물을 가져가는 경우의 수)
# 2) 1말고 또 다른 사람의 선물을 가져간다: N-1 명에 대한 완전 순열

# N명에 대한 완전 순열을 D_N 이라 할 때
# 사람 1이 어떤 사람 k의 선물을 골랐을 때,
# 이후 사람 k가 선물을 고르는 경우: (1 * D_N-2 + D_N-1)

# 이어서, 사람이 1이 어떤 사람 k의 선물을 고르는 경우는 N-1 개이므로
# 최종적으로:
# D_N = (N-1) * (1 * D_N-2 + D_N-1)

divisor = 1000000000

dp = [0] * (N + 1)
dp[1] = 0
if N >= 2: dp[2] = 1
if N >= 3: dp[3] = 2

if N >= 4:
    for i in range(4, N + 1):
        dp[i] = (i - 1) * (dp[i - 2] + dp[i - 1]) % divisor
        
print(dp[N])