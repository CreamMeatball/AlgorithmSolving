N, r, c = map(int, input().split())

# N = 2, r, c = 3, 1 이면
# 순서가 
# [0, 1, 2, 3 / 4, 5, 6, 7 / 8, 9, 10, 11 / 12, 13, 14, 15]
# 이렇게 있음.

# r = 0, 1일 때
# 0구간[0,1,2,3] 또는 1구간[4,5,6,7] 에 존재한다는 것.
# r = 2, 3일 때
# 2구간[8,9,10,11] 또는 3구간[12,13,14,15] 에 존재한다는 것.

# -> N**2 한다음에
# 거기서 반을 나눠. N = 2면 0,1,2,3 이고, 거기서 0,1 / 2,3 으로 반 나눠.
# r = 3이면 2구간 또는 3구간 이라는 거고 -> [8, 9, 10, 11 / 12, 13, 14, 15] 중에 답
# 여기서 또 반으로 나눠서, c의 범위도 0,1,2,3 인데, 이 또한 c=0 또는 1이면 0구간 / c=2 또는 3이면 1구간
# -> c=1이므로 0구간인 [8, 9, 10, 11] 중에 답

# 여기서 [8, 9, 10, 11] 중에 선택 방법은
# r, c를 각각 N의 절반인 2로 나눈 나머지로 재설정:
# r % 2 = 1
# c % 2 = 1
# 해서 r, c를 다시 구하고
# r = 1이기 때문에 [8, 9 / 10, 11] 중 [10, 11] 선택
# c = 1이기 때문에 [10, 11] 에서 11 선택

answer = 0
size = 2 ** N
while size > 1:
    half = size // 2
    q = (r >= half) * 2 + (c >= half) # 사분면 중 위치 선택 (0,1,2,3분면 중)
    answer += q * (half ** 2) # 선택된 사분면 이전의 사분면들에서 차지하는 개수 합
    # 현재 상태의 answer: 선택된 부분 사분면에서 가장 좌상단의 값(선택된 부분 사분면의 (0, 0) 값). 왜냐면 선택된 사분면 이전의 사분면들에서 차지하는 개수 합을 더했으니까.
    
    r %= half
    c %= half
    size = half

print(answer)

# 3 6 2 -> 44