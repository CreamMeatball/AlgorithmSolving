# PyPy3

X, Y, W, S = map(int, input().split())

dx, dy = abs(X), abs(Y)
m, M = min(dx, dy), max(dx, dy)
time = 0

if S >= 2 * W:                        # 평행 이동 2번이 대각선 이동 1번보다 효율적인 경우 (ex) 평행이동cost: 3, 대각선이동cost: 10) -> 대각선 이동 시에도 평행 이동 2번이 나으므로, 모든 이동을 평행 이동으로.
    time = (dx + dy) * W
elif S >= W:                          # 평행 이동 1번이 대각선 이동 1번보다 효율적이지만, 평행 이동 2번이 대각선 이동 1번보다도 효율적인 정도까진 아닌 경우 (ex) 평행이동cost: 7, 대각선이동cost: 10) -> 평행 이동 필요 시엔 그냥 평행 이동으로 하는 게 더 효율적이고, 대각선 이동할 때만 대각선 이동으로 하는 게 더 효율적임. x나 y가 목표 위치와 같아지기 전까진 대각선 이동이 효율적이다가, x나 y가 목표 위치와 같아진 순간부턴 평행 이동 반복이 더 효율적임.
    time = m * S + (M - m) * W
else:                                 # 대각선 이동 1번이 평행 이동 1번보다 효율적인 경우 (ex) 평행이동cost: 12, 대각선이동cost: 10) -> 평행 이동 할 때조차 대각선 이동 여러번 하는 게 더 효율적임(평행 이동 2번보다 대각선 이동 2번 해서 평행 이동이 나음)
    diff = M - m
    if diff % 2 == 0:                 # 남은 길이가 짝수 -> 대각선 이동 2번으로 평행이동 2번 치환
        time = M * S
    else:                             # 남은 길이가 홀수 -> 대각선 이동 2번으로 평행이동 2번 치환하다, 마지막 1칸은 평행 이동
        time = (M - 1) * S + W

print(time)